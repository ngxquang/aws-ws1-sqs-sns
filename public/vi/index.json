[
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/2-difference/2.1-sqs/",
	"title": "Amazon SQS",
	"tags": [],
	"description": "",
	"content": "1. Producer và Cusomter trong kiến trúc của Amazon SQS Producer là các ứng dụng hoặc hệ thống sản xuất và gửi thông điệp (message) vào hàng đợi (queue). Trong SQS, một producer có thể đẩy nhiều message không giới hạn vào queue. Việc producer chỉ cần gửi message mà không cần quan tâm đến thời điểm hay cách thức message được xử lý sau đó chính là điểm mạnh của kiến trúc decoupling.\nConsumer là các ứng dụng hoặc hệ thống nhận và xử lý message từ hàng đợi. Trong SQS, consumer chủ động lấy (pull) các message từ hàng đợi trong khoảng thời gian nhất định. Số lượng message mỗi lần consumer có thể lấy phụ thuộc vào thiết lập (polling) của hệ thống, có thể là một hoặc nhiều message.\nTrong hình vẽ, giả sử ta có 3 producer gửi các message m1, m2 và m3 vào Queue. Có 3 customer thực hiện vào để lấy message ra trong 1 khoảng interval. Mỗi lần lấy có thể là 1 hoặc nhiều message. Customer 1 có thể lấy m1, m2 cùng lúc, customer 2 có thể lấy m3, \u0026hellip;\n2. SQS giúp giải quyết vấn đề Async (bất đồng bộ) SQS hỗ trợ mô hình bất đồng bộ (asynchronous), nơi các producer gửi message mà không cần phải đợi các consumer xử lý chúng ngay lập tức, cho phép các thành phần của hệ thống hoạt động độc lập, không phụ thuộc vào nhau về mặt thời gian.\nHệ thống chỉ cần chắc chắn rằng thông điệp được gửi vào Queue, và consumer sẽ xử lý sau.\n3. Các tính chất của SQS 3.1 Liên quan đến Pull/Poll message SQS không tự động đẩy message đến consumer, thay vào đó, consumer phải chủ động vào hàng đợi để lấy message. Quá trình này gọi là polling. Consumer sẽ gửi yêu cầu tới SQS để lấy message, và queue sẽ trả về các message có sẵn.\nThông thường trong các kiến trúc Async thì sẽ xử lý phần message được producer đưa vào luôn nhưng đối với kiến trúc này thì tách biệt 2 phần xử lý → Kiến trúc liên quan đến Queue nói chung và SQS nói riêng được gọi là Decoupling\n3.2 Các loại Queue trong SQS Khi các Consumer chui vào lấy message thì không có khả năng tự chọn message để lấy. Việc Queue trả về message nào thì tùy vào tính chất của Queue.\nCó 2 loại Queue:\nFIFO Queue Standard Queue\n3.3 Persistent Các message trong SQS được lưu trữ trong hàng đợi và được xem là persistent (tồn tại lâu dài) cho đến khi chúng được một consumer xử lý thành công. Message có thể lưu trữ trong SQS tối đa 14 ngày. Nếu không được xử lý trong khoảng thời gian này, message sẽ bị tự động xóa. 3.4 Quan hệ 1-1 giữa Message và Consumer Trong kiến trúc SQS, một message chỉ có thể được xử lý bởi một consumer duy nhất tại một thời điểm. Điều này đảm bảo rằng mỗi message chỉ được xử lý một lần (đối với FIFO queue hoặc khi đã xử lý thành công đối với Standard queue). "
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/",
	"title": "Amazon SQS và Amazon SNS",
	"tags": [],
	"description": "",
	"content": "So sánh Amazon SQS và Amazon SNS Tổng quan Amazon SQS (Simple Queue Service) và Amazon SNS (Simple Notification Service) là hai dịch vụ nhắn tin của AWS, được sử dụng để xây dựng các hệ thống phân tán, quy mô lớn. Cả hai đều giúp đảm bảo tính tin cậy và khả năng mở rộng trong giao tiếp giữa các thành phần của ứng dụng, nhưng chúng được thiết kế với các mục đích khác nhau. Trong bài viết này, chúng ta sẽ đi so sánh 2 dịch vụ này có gì giống và khác nhau.\nNội dung Điểm giống Điểm khác Áp dụng kết hợp trong các kiến trúc phức tạp "
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/1-similar/1.2-messaging/",
	"title": "Dịch vụ messaging",
	"tags": [],
	"description": "",
	"content": "Amazon Simple Queue Service (SQS) và Amazon Simple Notification Service (SNS) đều là các dịch vụ messaging của AWS, được sử dụng để trao đổi thông điệp giữa các hệ thống và ứng dụng phân tán. Mặc dù SQS và SNS có những cách tiếp cận khác nhau trong cách chúng xử lý và truyền tải thông điệp, nhưng chúng đều được thiết kế nhằm mục tiêu đảm bảo tính nhất quán, khả năng mở rộng, và giảm tải khi truyền thông điệp giữa các hệ thống.\n1. Tăng khả năng mở rộng - Scalability Cả SQS và SNS đều cho phép các hệ thống xử lý thông điệp một cách không đồng bộ. Các hệ thống không cần phải đợi nhau để hoàn thành việc xử lý, mà có thể tiếp tục hoạt động, giảm thiểu tắc nghẽn. 2. Tính phân tán - Decoupling Messaging giúp phân tán các thành phần hệ thống, giúp cho các hệ thống không phụ thuộc trực tiếp vào nhau. Với messaging, các dịch vụ có thể giao tiếp mà không cần biết hệ thống phía sau đang thực hiện những gì hoặc thời gian xử lý thông điệp ra sao. 3. Đảm bảo thứ tự và tính toàn vẹn của thông điệp Cả SNS và SQS đều hỗ trợ việc đảm bảo thứ tự thông điệp (đặc biệt trong trường hợp SQS FIFO queues) và khả năng giao tiếp với nhiều dịch vụ, hệ thống khác nhau mà không làm mất đi sự nhất quán. "
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/1-similar/1.1-serverless/",
	"title": "Dịch vụ Serverless",
	"tags": [],
	"description": "",
	"content": "1. Không cần quản lý cơ sở hạ tầng Cả Amazon SQS và SNS đều không yêu cầu người dùng phải quản lý máy chủ hoặc cơ sở hạ tầng vật lý. AWS sẽ tự động lo việc provisioning, scaling, và quản lý server, giúp người dùng tập trung vào logic ứng dụng thay vì lo về việc duy trì các tài nguyên vật lý. 2. Tự động mở rộng (Auto-scaling) Với kiến trúc serverless, SQS và SNS tự động mở rộng theo khối lượng công việc. Khi lưu lượng thông điệp tăng lên, hệ thống sẽ tự động xử lý mà không cần cấu hình hoặc quản lý thủ công. 3. Tính chi phí linh hoạt (Pay-as-you-go) Với serverless, người dùng chỉ phải trả tiền cho tài nguyên thực sự được sử dụng. Trong SQS, chỉ cần trả cho số lượng thông điệp gửi và nhận. Trong SNS, chỉ cần trả cho thông báo (message) được gửi đi. Mô hình này giúp tối ưu chi phí vì không cần phải duy trì các tài nguyên liên tục ngay cả khi không có lưu lượng công việc. 4. Regional Scope AWS regional scope đề cập đến cách các dịch vụ AWS được triển khai và quản lý trong các khu vực địa lý cụ thể (regions). Mỗi region (khu vực) là một tập hợp các trung tâm dữ liệu được phân lập, cho phép người dùng lựa chọn nơi tài nguyên của họ sẽ được triển khai để đáp ứng yêu cầu về hiệu suất, tuân thủ quy định hoặc dự phòng dữ liệu.\nCác dịch vụ serverless như AWS Lambda, Amazon SQS, Amazon SNS, DynamoDB đều là dịch vụ thuộc regional scope\nAWS regional scope có liên quan mật thiết đến các dịch vụ serverless vì chúng đều yêu cầu việc chọn lựa region để triển khai và sử dụng.\n"
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/1-similar/",
	"title": "Điểm giống",
	"tags": [],
	"description": "",
	"content": "Amazon Simple Queue Service (SQS) và Amazon Simple Notification Service (SNS) dù có mục đích sử dụng khác nhau, cả hai dịch vụ đều chia sẻ những đặc điểm chung quan trọng. Hai điểm giống nổi bật giữa chúng là serverless và messaging, giúp tăng cường khả năng mở rộng và dễ dàng tích hợp vào các hệ thống hiện đại.\nNội dung Dịch vụ messaging Dịch vụ serverless "
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/2-difference/2.2-sns/",
	"title": "Amazon SNS",
	"tags": [],
	"description": "",
	"content": "1. Topic và sự khác biệt với Queue Sự khác biệt với SQS:\nSNS không sử dụng Queue như SQS, mà sử dụng khái niệm Topic. Trong khi SQS sử dụng hàng đợi (queue) để lưu trữ tạm thời các thông điệp cho đến khi chúng được các consumer lấy ra, SNS sử dụng các topic để quản lý và phân phối thông điệp ngay lập tức cho các subscriber. Trong SNS, các message không lưu trữ trong topic mà sẽ được gửi trực tiếp tới các subscriber khi nhận được.\n2. Publisher và Subscriber Publisher: Các publisher đóng vai trò gửi thông điệp vào topic. Publisher có thể là bất kỳ dịch vụ, hệ thống nào có khả năng phát ra các thông điệp cần truyền tải đến người nhận (subscriber).\nSubscriber: Các subscriber đăng ký nhận thông điệp từ một topic cụ thể. Một topic có thể có nhiều subscriber, và khi có thông điệp từ publisher, tất cả các subscriber sẽ nhận được thông điệp cùng một lúc.\nXét ví dụ trong hình, có 1 publisher gửi message tới topic. Topic này sẽ bắn message tới tất cả các subscriber cùng lúc\n3. Các tính chất của SNS 3.1 Push Model Push Model là điểm khác biệt lớn giữa SNS và SQS. Trong SNS, thay vì các consumer phải chủ động lấy (pull) thông điệp từ hàng đợi, message được đẩy (push) ngay lập tức từ topic đến tất cả các subscriber.\nĐem lại lợi ích lớn khi cơ chế push này giúp tăng cường tốc độ truyền tải thông tin khi thông điệp được phân phối ngay lập tức, phù hợp với các ứng dụng đòi hỏi thời gian thực.\n3.2 Broadcast Mô hình của SNS hoạt động theo kiểu broadcast: tức là một thông điệp từ publisher sẽ được gửi tới tất cả các subscriber đã đăng ký với topic. Điều này cho phép SNS phân phối thông điệp đến nhiều đích nhận cùng lúc, tạo nên mô hình truyền tin kiểu 1 - n (một thông điệp gửi tới nhiều người). 3.3 Non-persistent SNS không lưu trữ thông điệp (non-persistent). Điều này có nghĩa là khi một thông điệp được gửi vào topic, nó sẽ được phân phối ngay lập tức đến các subscriber và không có cơ chế lưu trữ lại thông điệp đó trong topic. Nếu không có subscriber nào đăng ký hoặc nếu một subscriber không nhận được thông điệp, thông điệp sẽ không được giữ lại để xử lý sau. 3.4 Quan hệ 1 - N Trong mô hình của SNS, một topic có thể có nhiều subscriber. Điều này tạo ra mối quan hệ 1 - n, tức là một publisher gửi một thông điệp đến topic, và thông điệp đó sẽ được phân phối đến tất cả các subscriber đã đăng ký. Điều này khác với SQS, nơi mà mỗi thông điệp thường chỉ được xử lý bởi một consumer duy nhất (quan hệ 1 - 1).\nSự khác biệt này giúp SNS trở nên phù hợp với các trường hợp sử dụng mà cần thông điệp được gửi đến nhiều dịch vụ hoặc nhiều người nhận cùng lúc.\n"
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/2-difference/",
	"title": "Điểm khác",
	"tags": [],
	"description": "",
	"content": "Amazon SNS (Simple Notification Service) và Amazon SQS (Simple Queue Service) đều là các dịch vụ messaging của AWS, nhưng chúng phục vụ cho những mục đích và kiến trúc khác nhau.\nTrong khi SNS hoạt động theo mô hình push để phân phối thông báo tới nhiều subscriber thông qua cơ chế broadcast, thì SQS sử dụng mô hình pull để lưu trữ và xử lý thông điệp thông qua các hàng đợi độc lập.\nNội dung Amazon SQS Amazon SNS "
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/3-combine/",
	"title": "Áp dụng trong các kiến trúc phức tạp",
	"tags": [],
	"description": "",
	"content": "Kiến trúc phổ biến khi áp dụng SQS và SNS là Fanout. Fanout Architecture nhằm mục đích tăng cường khả năng mở rộng (scaling) và tối ưu hóa chi phí.\n1. Fanout Architecture Fanout trong kiến trúc hệ thống có nghĩa là một thông điệp (message) từ một nguồn (SNS topic) sẽ được phân phối tới nhiều đích (SQS Queues). Điều này có nghĩa rằng thay vì chỉ có một nơi tiếp nhận và xử lý, thông điệp có thể được gửi đến nhiều nơi, giúp xử lý các công việc khác nhau một cách độc lập.\nVí dụ: Một SNS topic có thể nhận các thông điệp từ nhiều ứng dụng hoặc hệ thống khác nhau. Sau khi thông điệp được nhận, nó sẽ phân tán (fan out) đến nhiều hàng đợi (queues) khác nhau để các hệ thống khác có thể xử lý chúng theo cách riêng.\n2. Luồng hoạt động trong Fanout Architecture SNS Topic: Đây là nơi nhận thông điệp từ các ứng dụng hoặc người dùng. Ví dụ: một hệ thống có thể gửi thông điệp với nội dung là thông tin khách hàng, trong đó có một trường dữ liệu đặc biệt là book-type {\rbook-type: \u0026#34;detective\u0026#34; | \u0026#34;romantic\u0026#34; | \u0026#34;horror\u0026#34;,\rmetadata: ...\r} Minh họa bằng hình ảnh: Trong kiến trúc trên, giả sử các publisher A, B, C gửi message có cấu trúc như trên vào SNS. SNS có 1 cơ chế là filter. Filter này có thể lọc các thông điệp dựa trên các trường dữ liệu cụ thể. Ở ví dụ trên là book-type\nNhờ vào khả năng này, message sẽ được phân loại và gửi tới đúng các hàng đợi (queues) tương ứng. Ví dụ:\nmessage có book-type: \u0026ldquo;detective\u0026rdquo; sẽ được chuyển tới Queue 1. message có book-type: \u0026ldquo;romantic\u0026rdquo; sẽ được chuyển tới Queue 2. message có book-type: \u0026ldquo;horror\u0026rdquo; sẽ được chuyển tới Queue 3. Mỗi Queue (Queue 1, Queue 2, Queue 3) sẽ có máy chủ riêng poll để nhận thông điệp và xử lý theo loại sách (book-type).\nĐiều này có nghĩa rằng các hệ thống có thể được tối ưu hóa và mở rộng độc lập dựa trên khối lượng công việc của từng loại sách:\nVí dụ, người đọc ưa thích loại romantic có thể yêu cầu một hệ thống xử lý mạnh hơn, có nhiều tài nguyên hơn. người đọc loại detective có số lượng ít có thể được xử lý bởi một hệ thống ít tài nguyên hơn vì yêu cầu của họ không cao. 3. Giải quyết bài toán chi phí Fanout Architecture giúp tối ưu chi phí bằng cách phân tán các tác vụ xử lý dựa trên đặc thù từng loại dữ liệu, giúp hệ thống không phải tiêu tốn quá nhiều tài nguyên để xử lý tất cả mọi thứ trong một khối monolithic.\nThay vì dồn tất cả các thông điệp vào một hệ thống duy nhất để xử lý, có thể chia nhỏ công việc ra thành nhiều phần, mỗi phần xử lý một khối lượng công việc cụ thể. Cho phép scale từng phần của hệ thống dựa trên nhu cầu thực tế, thay vì phải mở rộng toàn bộ hệ thống cùng một lúc.\nVí dụ, nếu số lượng người đọc loại detective lớn hơn các loại khác, chỉ cần mở rộng các tài nguyên xử lý cho Queue 1, mà không cần tốn chi phí cho các hệ thống xử lý khác.\n"
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/aws-ws1-sqs-sns/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]